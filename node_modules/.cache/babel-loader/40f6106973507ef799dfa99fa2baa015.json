{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Brian/WeatherApp2/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Brian/WeatherApp2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport weatherData from \"../apis/openWeather\";\nimport axios from \"axios\";\nexport var FETCH_WEATHER = \"FETCH_WEATHER\";\nexport var fetchWeather = function fetchWeather(_ref) {\n  var lat = _ref.lat,\n      _long = _ref.long;\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(res, rej) {\n      var response, gridURL, forecast;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return weatherData.get(\"/points/\".concat(lat, \",\").concat(_long));\n\n            case 3:\n              response = _context.sent;\n              gridURL = response.data.properties.forecast;\n              _context.next = 7;\n              return axios.get(gridURL);\n\n            case 7:\n              forecast = _context.sent;\n              res(forecast.data.properties.periods);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              rej(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexport var getLocation = function getLocation() {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(res, rej) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              window.navigator.geolocation.getCurrentPosition(function (position) {\n                var positionRes = {\n                  lat: position.coords.latitude,\n                  long: position.coords.longitude\n                };\n                console.log(\"Lat:\", positionRes.lat, \"Long:\", positionRes.long);\n                res(positionRes);\n              }, function (err) {\n                rej(err);\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/Brian/WeatherApp2/src/actions/index.js"],"names":["weatherData","axios","FETCH_WEATHER","fetchWeather","lat","long","Promise","res","rej","get","response","gridURL","data","properties","forecast","periods","getLocation","window","navigator","geolocation","getCurrentPosition","position","positionRes","coords","latitude","longitude","console","log","err"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,qBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAmB;AAAA,MAAhBC,GAAgB,QAAhBA,GAAgB;AAAA,MAAXC,KAAW,QAAXA,IAAW;AAC7C,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAY,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEQR,WAAW,CAACS,GAAZ,mBAA2BL,GAA3B,cAAkCC,KAAlC,EAFR;;AAAA;AAETK,cAAAA,QAFS;AAGTC,cAAAA,OAHS,GAGCD,QAAQ,CAACE,IAAT,CAAcC,UAAd,CAAyBC,QAH1B;AAAA;AAAA,qBAIQb,KAAK,CAACQ,GAAN,CAAUE,OAAV,CAJR;;AAAA;AAITG,cAAAA,QAJS;AAKfP,cAAAA,GAAG,CAACO,QAAQ,CAACF,IAAT,CAAcC,UAAd,CAAyBE,OAA1B,CAAH;AALe;AAAA;;AAAA;AAAA;AAAA;AAOfP,cAAAA,GAAG,aAAH;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAUD,CAXM;AAaP,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,SAAO,IAAIV,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAY,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACjBS,cAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACE,UAAAC,QAAQ,EAAI;AACV,oBAAMC,WAAW,GAAG;AAClBlB,kBAAAA,GAAG,EAAEiB,QAAQ,CAACE,MAAT,CAAgBC,QADH;AAElBnB,kBAAAA,IAAI,EAAEgB,QAAQ,CAACE,MAAT,CAAgBE;AAFJ,iBAApB;AAIAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,WAAW,CAAClB,GAAhC,EAAqC,OAArC,EAA8CkB,WAAW,CAACjB,IAA1D;AACAE,gBAAAA,GAAG,CAACe,WAAD,CAAH;AACD,eARH,EASE,UAAAM,GAAG,EAAI;AACLpB,gBAAAA,GAAG,CAACoB,GAAD,CAAH;AACD,eAXH;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAeD,CAhBM","sourcesContent":["import weatherData from \"../apis/openWeather\";\nimport axios from \"axios\";\n\nexport const FETCH_WEATHER = \"FETCH_WEATHER\";\n\nexport const fetchWeather = ({ lat, long }) => {\n  return new Promise(async (res, rej) => {\n    try {\n      const response = await weatherData.get(`/points/${lat},${long}`);\n      const gridURL = response.data.properties.forecast;\n      const forecast = await axios.get(gridURL);\n      res(forecast.data.properties.periods);\n    } catch (err) {\n      rej(err);\n    }\n  });\n};\n\nexport const getLocation = () => {\n  return new Promise(async (res, rej) => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        const positionRes = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        };\n        console.log(\"Lat:\", positionRes.lat, \"Long:\", positionRes.long);\n        res(positionRes);\n      },\n      err => {\n        rej(err);\n      }\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}